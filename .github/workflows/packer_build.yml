name: Node.js Integration Test & Packer Build

# on:
#   pull_request:
#     types:
#       - closed

on:
  pull_request:
    branches:
      - main

jobs:
  packer_build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    env:
      PORT: ${{ secrets.PORT }}
      DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
      DATABASE_USER: ${{ secrets.DATABASE_USER }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
      DATABASE_POOL_MAX: ${{ secrets.DATABASE_POOL_MAX }}
      DATABASE_POOL_MIN: ${{ secrets.DATABASE_POOL_MIN }}
      DATABASE_POOL_ACQUIRE: ${{ secrets.DATABASE_POOL_ACQUIRE }}
      DATABASE_POOL_IDLE: ${{ secrets.DATABASE_POOL_IDLE }}
      DROP_DATABASE: ${{ secrets.DROP_DATABASE }}
      LOGGER_FILE_PATH: ${{ secrets.LOGGER_FILE_PATH }}
      LOGGER_LEVEL: ${{ secrets.LOGGER_LEVEL }}
      TOPIC_VERIFY_EMAIL: ${{ secrets.TOPIC_VERIFY_EMAIL }}
      VERIFY_EMAIL_EXPIRY_SECONDS: ${{ secrets.VERIFY_EMAIL_EXPIRY_SECONDS }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Postgres
        run: |
          sudo systemctl restart postgresql.service

          sudo -u postgres psql -c "CREATE DATABASE ${{ secrets.DATABASE_NAME }};"
          sudo -u postgres psql -c "CREATE USER ${{ secrets.DATABASE_USER }} WITH PASSWORD '${{ secrets.DATABASE_PASSWORD }}';"
          sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE ${{ secrets.DATABASE_NAME }} TO ${{ secrets.DATABASE_USER }};"

      - name: Setup Logger Directory
        run: |
          sudo mkdir /var/log/csye6225
          sudo mkdir /var/log/csye6225/webapp
          echo "Logger directory created at /var/log/csye6225/webapp"

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm run build --if-present
      - run: npm install
      - run: npm run test

      - name: Create env
        run: |
          touch .env
          echo "PORT=${{ secrets.PORT }}" >> .env
          echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> .env
          echo "DATABASE_USER=${{ secrets.DATABASE_USER }}" >> .env
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
          echo "DATABASE_HOST=${{ secrets.DATABASE_HOST }}" >> .env
          echo "DATABASE_POOL_MAX=${{ secrets.DATABASE_POOL_MAX }}" >> .env
          echo "DATABASE_POOL_MIN=${{ secrets.DATABASE_POOL_MIN }}" >> .env
          echo "DATABASE_POOL_ACQUIRE=${{ secrets.DATABASE_POOL_ACQUIRE }}" >> .env
          echo "DATABASE_POOL_IDLE=${{ secrets.DATABASE_POOL_IDLE }}" >> .env
          echo "DROP_DATABASE=${{ secrets.DROP_DATABASE }}" >> .env
          echo "LOGGER_FILE_PATH=${{ secrets.LOGGER_FILE_PATH }}" >> .env
          echo "LOGGER_LEVEL=${{ secrets.LOGGER_LEVEL }}" >> .env
          echo "TOPIC_VERIFY_EMAIL=${{ secrets.TOPIC_VERIFY_EMAIL }}" >> .env
          echo "VERIFY_EMAIL_EXPIRY_SECONDS=${{ secrets.VERIFY_EMAIL_EXPIRY_SECONDS }}" >> .env
          cat .env

      - name: Delete any created node_modules
        run: rm -r node_modules

      - name: Zip webapp file
        run: cd ../ && zip -r webapp.zip webapp && cd - && cp ../webapp.zip .

      - name: Install Packer
        run: sudo apt install -y packer

      - name: Packer Init
        run: packer init ./packer

      - name: Packer Format
        run: packer fmt -check ./packer

      - name: Packer Validate
        run: packer validate ./packer

      - name: GCP Authentication
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_AUTH_CREDENTIALS }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: GCloud Info
        run: gcloud info

      - name: Setup 'packer'
        uses: hashicorp/setup-packer@main
        with:
          version: "1.10.1"

      - name: Packer Init
        run: packer init ./packer

      - name: Create Timestamp
        id: create_timestamp
        run: |
          TIMESTAMP=$(date +%s)
          echo "Timestamp: $TIMESTAMP"
          echo "::set-output name=TIMESTAMP::$(date +%s)"

      - name: Create Image Name
        id: create_image_name
        run: |
          IMAGE_NAME="csye6225-webapp-image-${{ steps.create_timestamp.outputs.timestamp }}"
          echo "Image Name: $IMAGE_NAME"

      - name: Create Image Family Name
        id: create_image_family
        run: |
          IMAGE_FAMILY="csye6225-webapp-image-family"
          echo "Image Family Name: $IMAGE_FAMILY"

      - name: Packer Build
        run: packer build -var 'project_id=${{ secrets.GCP_PROJECT_ID }}' -var 'database_name=${{ secrets.DATABASE_NAME }}' -var 'database_user=${{ secrets.DATABASE_USER }}' -var 'database_password=${{ secrets.DATABASE_PASSWORD }}' -var 'machine_type=${{ secrets.PACKER_MACHINE_TYPE }}' -var 'zone=${{ secrets.PACKER_ZONE }}' -var 'region=${{ secrets.PACKER_REGION }}' -var 'image_name=${{ steps.create_image_name.outputs.IMAGE_NAME }}' -var 'image_family=${{ steps.create_image_family.outputs.IMAGE_FAMILY }}' ./packer

      - name: Create Instance Template
        id: create_instance_template
        run: |
          NEW_INSTANCE_TEMPLATE_NAME="webapp-instance-template-${{ steps.create_timestamp.outputs.TIMESTAMP }}"
          OLD_INSTANCE_TEMPLATE_NAME=$(gcloud compute instance-templates list --sort-by=creationTimestamp --limit=1 --format="value(name)")
          REGION=${{ secrets.PACKER_REGION }}
          MACHINE_TYPE=$(gcloud compute instance-templates describe ${OLD_INSTANCE_TEMPLATE_NAME} --region=${REGION} --format="value(properties.machineType)")
          NETWORK=$(gcloud compute instance-templates describe ${OLD_INSTANCE_TEMPLATE_NAME} --region=${REGION} --format="value(properties.networkInterfaces.network)"
          SUBNET=$(gcloud compute instance-templates describe ${OLD_INSTANCE_TEMPLATE_NAME} --region=${REGION} --format="value(properties.networkInterfaces.subnetwork)")
          NEW_IMAGE_LINK=$(gcloud compute images describe ${{ steps.create_image_name.outputs.IMAGE_NAME }} --format="value(selfLink)")
          BOOT_DISK_KMS_KEY=$(gcloud compute instance-templates describe ${OLD_INSTANCE_TEMPLATE_NAME} --region=${REGION} --format="value(properties.disks.diskEncryptionKey.kmsKeyName")
          BOOT_DISK_SIZE=$(gcloud compute instance-templates describe ${OLD_INSTANCE_TEMPLATE_NAME} --region=${REGION} --format="value(properties.disks.initializeParams.diskSizeGb)")
          BOOT_DISK_TYPE=$(gcloud compute instance-templates describe ${OLD_INSTANCE_TEMPLATE_NAME} --region=${REGION} --format="value(properties.disks.initializeParams.diskType)")
          LABELS=$(gcloud compute instance-templates describe ${OLD_INSTANCE_TEMPLATE_NAME} --region=${REGION} --format="value(properties.labels)")
          TAGS=$(gcloud compute instance-templates describe ${OLD_INSTANCE_TEMPLATE_NAME} --region=${REGION} --format="value(properties.tags.items)")
          METADATA=$(gcloud compute instance-templates describe ${OLD_INSTANCE_TEMPLATE_NAME} --region=${REGION} --format="value(properties.metadata.items.value)")
          SERVICE_ACCOUNT=$(gcloud compute instance-templates describe ${OLD_INSTANCE_TEMPLATE_NAME} --region=${REGION} --format="value(properties.serviceAccounts.email)")
          SCOPES=$(gcloud compute instance-templates describe ${OLD_INSTANCE_TEMPLATE_NAME} --region=${REGION} --format="value(properties.serviceAccounts.scopes)")
          SCOPES=$(echo "$SCOPES" | sed "s/\[\|\]//g")
          SCOPES=$(echo "$SCOPES" | sed "s/ *', *'/,/g")
          SCOPES=$(echo "$SCOPES" | sed "s/^'//;s/'$//")
          echo "Initialised New Instance Template Variables" 
          gcloud compute instance-templates create ${NEW_INSTANCE_TEMPLATE_NAME} \
          --instance-template-region=${REGION} \
          --machine-type=${MACHINE_TYPE} \
          --region=${REGION} \
          --network=${NETWORK} \
          --subnet=${SUBNET} \
          --create-disk=image=${NEW_IMAGE_LINK},boot=yes,auto-delete=yes,device-name=persistent-disk-0,size=${BOOT_DISK_SIZE},type=${BOOT_DISK_TYPE},kms-key=${BOOT_DISK_KMS_KEY} \
          --labels=${LABELS} \
          --tags=${TAGS} \
          --metadata=startup-script='${METADATA}' \
          --service-account=${SERVICE_ACCOUNT} \
          --scopes=${SCOPES} \
          --reservation-affinity=any
          echo "Instance Template Created"

      - name: Update Managed Instance Group
        id: update_managed_instance_group
        run: |
          NEW_INSTANCE_TEMPLATE_LINK=$(gcloud compute instance-templates describe ${{ steps.create_instance_template.outputs.NEW_INSTANCE_TEMPLATE_NAME }} --region=$REGION --format="value(selfLink)")
          MANAGED_INSTANCE_GROUP_NAME=$(gcloud compute instance-groups managed list --sort-by=creationTimestamp --limit=1 --format="value(name)")
          REGION=${{ secrets.PACKER_REGION }}
          echo "Initialised New Managed Instance Group Variables"
          gcloud compute instance-groups managed rolling-action start-update ${MANAGED_INSTANCE_GROUP_NAME} --version template=${NEW_INSTANCE_TEMPLATE_LINK} --region=${REGION}
          echo "Managed Instance Group Updated"

      - name: Wait Until Managed Instance Group is Stable
        id: wait_until_managed_instance_group_is_stable
        run: |
          REGION=${{ secrets.PACKER_REGION }}
          gcloud compute instance-groups managed wait-until ${{ steps.update_managed_instance_group.outputs.MANAGED_INSTANCE_GROUP_NAME }} \
          --version-target-reached \
          --region=${REGION}
          echo "Managed Instance group is stable"
